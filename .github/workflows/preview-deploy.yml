name: Deploy Preview App
on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
    branches:
      - beta

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  FLY_REGION: yyz
  FLY_ORG: personal

jobs:
  # TODO: would https://github.com/dorny/paths-filter#conditional-execution
  # cause desync/unknown variables?
  env_setup:
    runs-on: ubuntu-latest
    steps:
      - name: Create preview slug
        id: preview_slug
        env:
          PR_NUMBER: ${{ github.event.number }}
          BRANCH_NAME: ${{ github.head_ref }}
          COMMIT_SHA: ${{ github.sha }}
        run: |
          CLEAN_BRANCH=${BRANCH_NAME//\//-}
          echo "CLEAN_BRANCH=${CLEAN_BRANCH}" >> ${GITHUB_OUTPUT}
          echo "PREVIEW_SLUG=${PR_NUMBER}-${CLEAN_BRANCH}-${COMMIT_SHA:0:8}" >> ${GITHUB_OUTPUT}
    outputs:
      clean_branch: ${{ steps.preview_slug.outputs.CLEAN_BRANCH }}
      slug: ${{ steps.preview_slug.outputs.PREVIEW_SLUG }}

  # teardown_on_sync:
  #   if: ${{ github.event.action == 'synchronize' }}
  #   runs-on: ubuntu-latest

  #   needs: [env_setup]

  #   steps:
  #     - uses: superfly/flyctl-actions/setup-flyctl@master
  #     - uses: 

  preview_deploy:
    runs-on: ubuntu-latest

    needs: [env_setup]

    # env-name template: preview-${{ github.event.number }}
    concurrency:
      group: preview-${{ github.event.number }}

    environment:
      name: preview-${{ github.event.number }}
      url: ${{ steps.deploy.outputs.url }}

    env:
      prefix: ${{ needs.env_setup.outputs.slug }}
      meili_key: ${{ needs.env_setup.outputs.slug}}-staging-meili-key

    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy Meilisearch
        run: |
          cd search
          flyctl launch \
            --name ${prefix}-meilisearch \
            --no-deploy \
            --build-only \
            --copy-config \
            --now \
            --no-deploy \
            --remote-only \
            --region $FLY_REGION \
            --org $FLY_ORG
            
          flyctl deploy \
            --app ${prefix}-meilisearch \
            --config fly.toml \
            --remote-only \
            --strategy immediate \
            --region $FLY_REGION \
            --env MEILI_MASTER_KEY=${meili_key}
            # --env MEILI_HTTP_ADDR=fly-local-6pn:7700 \
            
          cd ..
      - name: Deploy Django
        env:
          db: ${{ secrets.DEV_DB_APP_NAME }}
          appname: ${{ env.prefix }}-django
        run: |
          cd backend
          flyctl launch \
            --name $appname \
            --no-deploy \
            --build-only \
            --copy-config \
            --now \
            --no-deploy \
            --remote-only \
            --region $FLY_REGION \
            --org $FLY_ORG
          
          flyctl postgres attach \
            $db \
            --app $appname \
            --database-user "django_staging_${prefix//-/_}" \
            --database-name "django_staging_${prefix//-/_}"

          flyctl deploy \
            --app $appname \
            --config fly.toml \
            --remote-only \
            --strategy immediate \
            --region $FLY_REGION \
            --env DJANGO_SETTINGS_MODULE=api.settings.staging \
            --env ALLOWED_HOSTS=${appname}.fly.dev \
            --env CSRF_TRUSTED_ORIGINS=https://${appname}.fly.dev \
            --env MEILISEARCH_HOST=https://${prefix}-meilisearch.fly.dev:7700 \
            --env MEILISEARCH_KEY=${meili_key}

          cd ..

      # - name: Deploy Meilisearch
      #   uses: superfly/fly-pr-review-apps@1.0.0
      #   with:
      #     update: false # don't redeploy when PR is updated
      #     path: search
      #     name: ${{ env.prefix }}-meilisearch

      # - name: Deploy backend
      #   uses: superfly/fly-pr-review-apps@1.0.0
      #   with:
      #     path: backend
      #     name: ${{ env.prefix }}-django
      #     postgres: ${{ secrets.DEV_DB_APP_NAME }}

      # - name: Deploy frontend
      #   uses: superfly/fly-pr-review-apps@1.0.0
      #   with:
      #     path: frontend
      #     name: ${{ env.prefix }}-frontend

  teardown_on_failure:
    if: ${{ failure() }}
    needs: [env_setup, preview_deploy]
    runs-on: ubuntu-latest
    steps:
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - env:
          prefix: ${{ needs.env_setup.outputs.slug }}
        run: |
          flyctl apps destroy -y $prefix-meilisearch || true; \
          flyctl apps destroy -y $prefix-django || true; \
          flyctl apps destroy -y $prefix-frontend || true

  # Clean up environment on PR close
  cleanup_environment:
    if: ${{ always() && github.event.action == 'closed' }}
    needs: [env_setup, preview_deploy]
    runs-on: ubuntu-latest
    steps:
      - uses: strumwolf/delete-deployment-environment@v2.3.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: preview-${{ github.event.number }}
